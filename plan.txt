--- class structures ---

class Client:
	fields:
		firstname -> first name
		lastname -> last name
                email -> client's email
                phone -> client's phone
		vip specialty -> VIP's specialization, can be enum or subclass of Spec class, but
					not just a word because it can be hard to standardize
		clinic/office address -> geolocation/coordinates, can link to Google Maps API but
						ideally not string
	
	operations:
		be able to modify firstname and lastname
		be able to modify vip specialty
		be able to modify clinic/office address
		
class ClientPlan:
	fields:
		client -> client, of class VIP
		outlet indicator -> geolocation/coordinates, institution where metrics can be
					collected about products sold to the client
		programs to be implemented -> list of strings
		support during coverage -> list of strings
		target products -> array of target products, can be strings, enums, or objects of class TargetProduct
                schedule -> schedule of visits
	
	operations:
		be able to modify outlet indicator
		be able to append / remove from programs to be implemented
		be able to append / remove from support during coverage
		be able to append / remove from target products

		be able to retrieve client plans for a given client

class Representative:
	fields:
		firstname -> first name
		lastname -> last name
		client_plans -> ClientPlans, describes what clients the 
			representative is interacting with

	operations:
		be able to modify firstname and lastname
		be able to append / remove from client_plans

		get the client plans given a rep id
		
class TargetProduct:
    fields:
        name -> string
        type -> string
		
	operations:
		be able to modify all fields

Possible operations:
Solve traveling salesman problem, could help optimize representative travel time
by generating routes for them to go to their clients efficiently

--- main routine ---
1. representatives will perform jobs listed in their client plans depending on if they are scheduled for the day
2. 
